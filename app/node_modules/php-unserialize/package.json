{
  "author": {
    "name": "Nicolas Chambrier",
    "email": "naholyr@gmail.com",
    "url": "http://naholyr.fr"
  },
  "name": "php-unserialize",
  "description": "tool to unserialize data taken from PHP. It can parse \"serialize()\" output, or even serialized sessions data.",
  "version": "0.0.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/naholyr/js-php-unserialize.git"
  },
  "main": "php-unserialize.js",
  "scripts": {
    "test": "_mocha -R list -u bdd"
  },
  "dependencies": {},
  "devDependencies": {
    "chai": "~1.3.0",
    "mocha": "~1.7.0"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "js-php-unserialize\n==================\n\n[![Build Status](https://secure.travis-ci.org/naholyr/js-php-unserialize.png)](http://travis-ci.org/naholyr/js-php-unserialize)\n\nJavaScript tool to unserialize data taken from PHP. It can parse \"serialize()\" output, or even serialized sessions data.\n\nCredits\n-------\n\n* The PHP unserializer is taken from [kvz](https://github.com/kvz)'s [phpjs](https://github.com/kvz/phpjs) project.\n* The session unserializer's idea is taken from [dumpling](https://raw.github.com/st-luke/dumpling/), which is highly limited by its lack of a real unserializer, and has lot of crash cases.\n\nInstallation\n------------\n\n### Node.js\n\nInstall from npm :\n\n```sh\nnpm install php-unserialize\n```\n\nThe use it the usual way :\n\n```javascript\nvar PHPUnserialize = require('php-unserialize');\n\nconsole.log(PHPUnserialize.unserialize('a:0:{}')); // {}\n```\n\n### Browser\n\n[Download tarball from github](https://github.com/naholyr/js-php-unserialize/downloads) and then unarchive this where you want, then you can simply include it in your page :\n\n```html\n<script src=\"/path/to/php-unserialize.js\"></script>\n<script>\n  console.log(PHPUnserialize.unserialize('a:0:{}')); // {}\n</script>\n```\n\n**Compatibility issues**\n\nThis library has been tested server-side only. For example it uses `[].reduce`, so it may not work on some browsers. Do not hesitate to make pull requests to fix it for you favorite browsers :)\n\n### Notes\n\n* Note that `array()` will be converted to `{}` and not `[]`. That can be discussed as `array()` in PHP has various significations. A choice had to be done, but it may change in the future (cf. next point).\n* A less obvious conversion is `array('a', 'b')` which will be converted to `{\"0\": \"a\", \"1\": \"b\"}`. Quite annoying, and it will be fixed if necessary (this means I won't work on this issue unless you really need it, but I agree this is not normal behavior).\n\nUsage\n-----\n\nThe module exposes two methods:\n\n### `unserialize(string)`\n\nUnserialize output taken from PHP's `serialize()` method.\n\nIt currently does not suport objects.\n\n### `unserializeSession(string)`\n\nUnserialize PHP serialized session. PHP uses a weird custom format to serialize session data, something like \"`$key1$serializedData1|$key2$serializedData2|…`\", this methods will parse this and unserialize chunks so you can have a simple anonymous objects.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/naholyr/js-php-unserialize/issues"
  },
  "homepage": "https://github.com/naholyr/js-php-unserialize",
  "_id": "php-unserialize@0.0.1",
  "dist": {
    "shasum": "ac781f7d0dd50a6e74c2316f243fe7fd27db5fc1"
  },
  "_from": "php-unserialize@",
  "_resolved": "https://registry.npmjs.org/php-unserialize/-/php-unserialize-0.0.1.tgz"
}
